<!doctype html>
<html lang="en">

<head>
    <script src="js/libs/jquery.js"></script>
    <script src="js/system/serverConfig.js"></script>
</head>

<body>

    <div class="section">

        <div class="video-container">
            <div class="color-overlay"></div>
            <video id="video" autoplay loop muted>
                <source id="source" type="video/mp4">
            </video>
        </div>

    </div>

    <div class="splash-container centeredX">
        <div class="centeredX">
            <form id="formURL">
                <h1 id="result" class="invisible"></h1>
                <input id="nfce" type="text" autocomplete="off">
                <button type="submit" class="invisible">Enviar</button>
            </form>
        </div>
    </div>

</body>

<style>
    .invisible {
        display: none;
    }

    .centeredX {
        text-align: center;
    }

    body {
        overflow: hidden;
        font-family: "Impact", fantasy;
    }

    video {
        position: absolute;
        top: 50%;
        left: 50%;
        -webkit-transform: translateX(-50%) translateY(-50%);
        transform: translateX(-50%) translateY(-50%);
        min-width: 100%;
        min-height: 100%;
        width: auto;
        height: auto;
        z-index: -1000;
        overflow: hidden;
    }

    #nfce {
        opacity: 0;
    }
</style>

<script>

    var okNFCE = "Saída Liberada";
    var waitNFCE = "Posicione o QRCode no Local indicado"
    var wrongNFCE = "Nota Fiscal Não Permitida";
    var usedNFCE = "Nota Fiscal Já Utilizada";
    var waitingVideo = "waitingVideo.mp4";
    var allowedVideo = "allowedVideo.mp4";
    var notAllowedVideo = "notAllowedVideo.mp4";

    document.addEventListener("click", function (e) {
        document.getElementById("nfce").focus();
    });

    /*

    CASO O SCANNER NÃO DÊ ENTER SOZINHO
    
    setup before functions
    var typingTimer;                //timer identifier
    var doneTypingInterval = 500;  //time in ms, 5 second for example
    var $input = $('#nfce');

    //on keyup, start the countdown
    $input.on('keyup', function () {
    clearTimeout(typingTimer);
    typingTimer = setTimeout(doneTyping, doneTypingInterval);
    });

    //on keydown, clear the countdown 
    $input.on('keydown', function () {
    clearTimeout(typingTimer);
    });

    //user is "finished typing," do something
    function doneTyping () {
        $(#formURL).submit();
    }*/

    document.getElementById("formURL").addEventListener("submit", function (e) {

        e.preventDefault();
        var nfce = document.getElementById("nfce").value;

        var xhttp = new XMLHttpRequest();
        xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function () {

            if (this.readyState == 4 && this.status == 200) {

                var dadosURL = JSON.parse(this.responseText);

                var xhttp2 = new XMLHttpRequest();
                xhttp2 = new XMLHttpRequest();

                xhttp2.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {

                        var affiliates = JSON.parse(this.responseText);

                        var xhttp3 = new XMLHttpRequest();
                        xhttp3 = new XMLHttpRequest();

                        xhttp3.onreadystatechange = function () {
                            if (this.readyState == 4 && this.status == 200) {
                                var usedDocuments = JSON.parse(this.responseText);

                                var affiliate = false;
                                var NFCE = false;
                                var checkCNPJ = false;
                                var checkNFCE = false;

                                affiliates.forEach(element => {
                                    if (dadosURL.cnpj == element.cnpj) {
                                        checkCNPJ = true;
                                        affiliate = element;
                                    }
                                });

                                usedDocuments.forEach(element => {
                                    if (dadosURL.nfce == element.nfce) {
                                        checkNFCE = true;
                                        NFCE = element;
                                    }
                                });

                                NFCE = dadosURL.nfce;

                                if (checkCNPJ == false && checkNFCE == false) {
                                    cleanInputNFCE();
                                    changeSRCNotAllowed();
                                    document.getElementById("result").innerHTML = wrongNFCE;
                                } else if (checkCNPJ == false && checkNFCE == true) {
                                    cleanInputNFCE();
                                    changeSRCNotAllowed();
                                    document.getElementById("result").innerHTML = wrongNFCE;
                                } else if (checkCNPJ == true && checkNFCE == true) {
                                    cleanInputNFCE();
                                    changeSRCNotAllowed();
                                    document.getElementById("result").innerHTML = usedNFCE;
                                } else if (checkCNPJ == true && checkNFCE == false) {

                                    var xhttp4 = new XMLHttpRequest();
                                    xhttp4 = new XMLHttpRequest();
                                    var document_type = "AFF";

                                    xhttp4.onreadystatechange = function () {
                                        if (this.readyState == 4 && this.status == 200) {
                                            var doc = JSON.parse(this.responseText);
                                            actCancel();
                                            cleanInputNFCE();
                                            changeSRCAllowed();
                                            document.getElementById("result").innerHTML = okNFCE;
                                        }
                                    }

                                    var url = `http://${IP_DO_SERVIDOR}:3000/document`;
                                    xhttp4.open("POST", url, true);
                                    xhttp4.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                                    xhttp4.send(`document_type=${document_type}&nfce=${NFCE}`);

                                }

                                setTimeout(function () {
                                    document.getElementById("result").innerHTML = waitNFCE;
                                    changeSRCWaiting();
                                }, 4000);

                            }

                        }

                        var url = `http://${IP_DO_SERVIDOR}:3000/document_Affiliates`;
                        xhttp3.open("GET", url, true);
                        xhttp3.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                        xhttp3.send();

                    };
                }

                var url = `http://${IP_DO_SERVIDOR}:3000/affiliate`;
                xhttp2.open("GET", url, true);
                xhttp2.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xhttp2.send();

            };

        }

        var url = `http://${IP_DO_SERVIDOR}:5000/url`;
        xhttp.open("POST", url, true);
        xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xhttp.send(`url=${nfce}`);

    });

    function changeSRCWaiting() {

        var video = document.getElementById('video');
        var source = document.getElementById('source');

        video.pause();
        source.setAttribute('src', waitingVideo);
        video.load();
        video.play();

    }

    function changeSRCAllowed() {

        var video = document.getElementById('video');
        var source = document.getElementById('source');

        video.pause();
        source.setAttribute('src', allowedVideo);
        video.load();
        video.play();

    }

    function changeSRCNotAllowed() {

        var video = document.getElementById('video');
        var source = document.getElementById('source');

        video.pause();
        source.setAttribute('src', notAllowedVideo);
        video.load();
        video.play();

    }

    function checkTerminalGama() {

        var ipList = httpGet(`http://${IP_DO_SERVIDOR}:5000/ip`);
        var terminalList = httpGet(`http://${IP_DO_SERVIDOR}:3000/terminal`);
        var terminalResult = false;

        terminalList.forEach(terminal => {

            for (var key in ipList) {
                if (!ipList.hasOwnProperty(key)) { continue; }
                if (ipList[key] == terminal.ip) {
                    terminalResult = terminal;
                }
            };

        });

        if (terminalResult == false) {
            console.log("Terminal não cadastrado");
        } else {
            localStorage.setItem('IP',terminalResult.ip_cancela);
            document.getElementById("nfce").focus();
            changeSRCWaiting();
        }

    }

    function cleanInputNFCE() {
        document.getElementById("nfce").value = "";
        document.getElementById("nfce").focus();
    }

    function actCancel(ip) {
        var ip = localStorage.getItem("IP");
        httpGet2(`http://${ip}:3000/actCancelON`);
    }

    function httpGet(theUrl) {
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open("GET", theUrl, false); // false for synchronous request
        xmlHttp.send(null);
        return JSON.parse(xmlHttp.responseText);
    }

    function httpGet2(theUrl) {
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open("GET", theUrl, false); // false for synchronous request
        xmlHttp.send(null);
        return true;
    }

    window.onload = function () {
        checkTerminalGama();
    }

</script>

</html>